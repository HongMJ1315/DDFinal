// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/30/2022 01:57:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	BUT,
	clk,
	reset,
	SW,
	sampler_tx
);
input [2:0] BUT;
input  clk;
input  reset;
input [3:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(BUT or clk or reset or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	check,
	dp,
	ring,
	SEG0,
	SEG1,
	SEG2,
	SEG3,
	sampler_rx
);
input  check;
input [3:0] dp;
input  ring;
input [6:0] SEG0;
input [6:0] SEG1;
input [6:0] SEG2;
input [6:0] SEG3;
input sampler_rx;

reg  check_expected;
reg [3:0] dp_expected;
reg  ring_expected;
reg [6:0] SEG0_expected;
reg [6:0] SEG1_expected;
reg [6:0] SEG2_expected;
reg [6:0] SEG3_expected;

reg  check_prev;
reg [3:0] dp_prev;
reg  ring_prev;
reg [6:0] SEG0_prev;
reg [6:0] SEG1_prev;
reg [6:0] SEG2_prev;
reg [6:0] SEG3_prev;

reg  check_expected_prev;
reg [3:0] dp_expected_prev;
reg  ring_expected_prev;
reg [6:0] SEG0_expected_prev;
reg [6:0] SEG1_expected_prev;
reg [6:0] SEG2_expected_prev;
reg [6:0] SEG3_expected_prev;

reg  last_check_exp;
reg [3:0] last_dp_exp;
reg  last_ring_exp;
reg [6:0] last_SEG0_exp;
reg [6:0] last_SEG1_exp;
reg [6:0] last_SEG2_exp;
reg [6:0] last_SEG3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	check_prev = check;
	dp_prev = dp;
	ring_prev = ring;
	SEG0_prev = SEG0;
	SEG1_prev = SEG1;
	SEG2_prev = SEG2;
	SEG3_prev = SEG3;
end

// update expected /o prevs

always @(trigger)
begin
	check_expected_prev = check_expected;
	dp_expected_prev = dp_expected;
	ring_expected_prev = ring_expected;
	SEG0_expected_prev = SEG0_expected;
	SEG1_expected_prev = SEG1_expected;
	SEG2_expected_prev = SEG2_expected;
	SEG3_expected_prev = SEG3_expected;
end


// expected dp[ 3 ]
initial
begin
	dp_expected[3] = 1'b0;
end 
// expected dp[ 2 ]
initial
begin
	dp_expected[2] = 1'b0;
end 
// expected dp[ 1 ]
initial
begin
	dp_expected[1] = 1'b0;
end 
// expected dp[ 0 ]
initial
begin
	dp_expected[0] = 1'b0;
end 

// expected ring
initial
begin
	ring_expected = 1'bX;
end 
// expected SEG0[ 6 ]
initial
begin
	SEG0_expected[6] = 1'bX;
end 
// expected SEG0[ 5 ]
initial
begin
	SEG0_expected[5] = 1'bX;
end 
// expected SEG0[ 4 ]
initial
begin
	SEG0_expected[4] = 1'bX;
end 
// expected SEG0[ 3 ]
initial
begin
	SEG0_expected[3] = 1'bX;
end 
// expected SEG0[ 2 ]
initial
begin
	SEG0_expected[2] = 1'bX;
end 
// expected SEG0[ 1 ]
initial
begin
	SEG0_expected[1] = 1'bX;
end 
// expected SEG0[ 0 ]
initial
begin
	SEG0_expected[0] = 1'bX;
end 
// expected SEG1[ 6 ]
initial
begin
	SEG1_expected[6] = 1'bX;
end 
// expected SEG1[ 5 ]
initial
begin
	SEG1_expected[5] = 1'bX;
end 
// expected SEG1[ 4 ]
initial
begin
	SEG1_expected[4] = 1'bX;
end 
// expected SEG1[ 3 ]
initial
begin
	SEG1_expected[3] = 1'bX;
end 
// expected SEG1[ 2 ]
initial
begin
	SEG1_expected[2] = 1'bX;
end 
// expected SEG1[ 1 ]
initial
begin
	SEG1_expected[1] = 1'bX;
end 
// expected SEG1[ 0 ]
initial
begin
	SEG1_expected[0] = 1'bX;
end 
// expected SEG2[ 6 ]
initial
begin
	SEG2_expected[6] = 1'bX;
end 
// expected SEG2[ 5 ]
initial
begin
	SEG2_expected[5] = 1'bX;
end 
// expected SEG2[ 4 ]
initial
begin
	SEG2_expected[4] = 1'bX;
end 
// expected SEG2[ 3 ]
initial
begin
	SEG2_expected[3] = 1'bX;
end 
// expected SEG2[ 2 ]
initial
begin
	SEG2_expected[2] = 1'bX;
end 
// expected SEG2[ 1 ]
initial
begin
	SEG2_expected[1] = 1'bX;
end 
// expected SEG2[ 0 ]
initial
begin
	SEG2_expected[0] = 1'bX;
end 
// expected SEG3[ 6 ]
initial
begin
	SEG3_expected[6] = 1'bX;
end 
// expected SEG3[ 5 ]
initial
begin
	SEG3_expected[5] = 1'bX;
end 
// expected SEG3[ 4 ]
initial
begin
	SEG3_expected[4] = 1'bX;
end 
// expected SEG3[ 3 ]
initial
begin
	SEG3_expected[3] = 1'bX;
end 
// expected SEG3[ 2 ]
initial
begin
	SEG3_expected[2] = 1'bX;
end 
// expected SEG3[ 1 ]
initial
begin
	SEG3_expected[1] = 1'bX;
end 
// expected SEG3[ 0 ]
initial
begin
	SEG3_expected[0] = 1'bX;
end 

// expected check
initial
begin
	check_expected = 1'bX;
end 
// generate trigger
always @(check_expected or check or dp_expected or dp or ring_expected or ring or SEG0_expected or SEG0 or SEG1_expected or SEG1 or SEG2_expected or SEG2 or SEG3_expected or SEG3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected check = %b | expected dp = %b | expected ring = %b | expected SEG0 = %b | expected SEG1 = %b | expected SEG2 = %b | expected SEG3 = %b | ",check_expected_prev,dp_expected_prev,ring_expected_prev,SEG0_expected_prev,SEG1_expected_prev,SEG2_expected_prev,SEG3_expected_prev);
	$display("| real check = %b | real dp = %b | real ring = %b | real SEG0 = %b | real SEG1 = %b | real SEG2 = %b | real SEG3 = %b | ",check_prev,dp_prev,ring_prev,SEG0_prev,SEG1_prev,SEG2_prev,SEG3_prev);
`endif
	if (
		( check_expected_prev !== 1'bx ) && ( check_prev !== check_expected_prev )
		&& ((check_expected_prev !== last_check_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port check :: @time = %t",  $realtime);
		$display ("     Expected value = %b", check_expected_prev);
		$display ("     Real value = %b", check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_check_exp = check_expected_prev;
	end
	if (
		( dp_expected_prev[0] !== 1'bx ) && ( dp_prev[0] !== dp_expected_prev[0] )
		&& ((dp_expected_prev[0] !== last_dp_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dp_expected_prev);
		$display ("     Real value = %b", dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dp_exp[0] = dp_expected_prev[0];
	end
	if (
		( dp_expected_prev[1] !== 1'bx ) && ( dp_prev[1] !== dp_expected_prev[1] )
		&& ((dp_expected_prev[1] !== last_dp_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dp_expected_prev);
		$display ("     Real value = %b", dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dp_exp[1] = dp_expected_prev[1];
	end
	if (
		( dp_expected_prev[2] !== 1'bx ) && ( dp_prev[2] !== dp_expected_prev[2] )
		&& ((dp_expected_prev[2] !== last_dp_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dp_expected_prev);
		$display ("     Real value = %b", dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dp_exp[2] = dp_expected_prev[2];
	end
	if (
		( dp_expected_prev[3] !== 1'bx ) && ( dp_prev[3] !== dp_expected_prev[3] )
		&& ((dp_expected_prev[3] !== last_dp_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dp[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dp_expected_prev);
		$display ("     Real value = %b", dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dp_exp[3] = dp_expected_prev[3];
	end
	if (
		( ring_expected_prev !== 1'bx ) && ( ring_prev !== ring_expected_prev )
		&& ((ring_expected_prev !== last_ring_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ring :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ring_expected_prev);
		$display ("     Real value = %b", ring_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ring_exp = ring_expected_prev;
	end
	if (
		( SEG0_expected_prev[0] !== 1'bx ) && ( SEG0_prev[0] !== SEG0_expected_prev[0] )
		&& ((SEG0_expected_prev[0] !== last_SEG0_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG0_expected_prev);
		$display ("     Real value = %b", SEG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SEG0_exp[0] = SEG0_expected_prev[0];
	end
	if (
		( SEG0_expected_prev[1] !== 1'bx ) && ( SEG0_prev[1] !== SEG0_expected_prev[1] )
		&& ((SEG0_expected_prev[1] !== last_SEG0_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG0_expected_prev);
		$display ("     Real value = %b", SEG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SEG0_exp[1] = SEG0_expected_prev[1];
	end
	if (
		( SEG0_expected_prev[2] !== 1'bx ) && ( SEG0_prev[2] !== SEG0_expected_prev[2] )
		&& ((SEG0_expected_prev[2] !== last_SEG0_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG0_expected_prev);
		$display ("     Real value = %b", SEG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SEG0_exp[2] = SEG0_expected_prev[2];
	end
	if (
		( SEG0_expected_prev[3] !== 1'bx ) && ( SEG0_prev[3] !== SEG0_expected_prev[3] )
		&& ((SEG0_expected_prev[3] !== last_SEG0_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG0_expected_prev);
		$display ("     Real value = %b", SEG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SEG0_exp[3] = SEG0_expected_prev[3];
	end
	if (
		( SEG0_expected_prev[4] !== 1'bx ) && ( SEG0_prev[4] !== SEG0_expected_prev[4] )
		&& ((SEG0_expected_prev[4] !== last_SEG0_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG0_expected_prev);
		$display ("     Real value = %b", SEG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SEG0_exp[4] = SEG0_expected_prev[4];
	end
	if (
		( SEG0_expected_prev[5] !== 1'bx ) && ( SEG0_prev[5] !== SEG0_expected_prev[5] )
		&& ((SEG0_expected_prev[5] !== last_SEG0_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG0_expected_prev);
		$display ("     Real value = %b", SEG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SEG0_exp[5] = SEG0_expected_prev[5];
	end
	if (
		( SEG0_expected_prev[6] !== 1'bx ) && ( SEG0_prev[6] !== SEG0_expected_prev[6] )
		&& ((SEG0_expected_prev[6] !== last_SEG0_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG0_expected_prev);
		$display ("     Real value = %b", SEG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SEG0_exp[6] = SEG0_expected_prev[6];
	end
	if (
		( SEG1_expected_prev[0] !== 1'bx ) && ( SEG1_prev[0] !== SEG1_expected_prev[0] )
		&& ((SEG1_expected_prev[0] !== last_SEG1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[0] = SEG1_expected_prev[0];
	end
	if (
		( SEG1_expected_prev[1] !== 1'bx ) && ( SEG1_prev[1] !== SEG1_expected_prev[1] )
		&& ((SEG1_expected_prev[1] !== last_SEG1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[1] = SEG1_expected_prev[1];
	end
	if (
		( SEG1_expected_prev[2] !== 1'bx ) && ( SEG1_prev[2] !== SEG1_expected_prev[2] )
		&& ((SEG1_expected_prev[2] !== last_SEG1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[2] = SEG1_expected_prev[2];
	end
	if (
		( SEG1_expected_prev[3] !== 1'bx ) && ( SEG1_prev[3] !== SEG1_expected_prev[3] )
		&& ((SEG1_expected_prev[3] !== last_SEG1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[3] = SEG1_expected_prev[3];
	end
	if (
		( SEG1_expected_prev[4] !== 1'bx ) && ( SEG1_prev[4] !== SEG1_expected_prev[4] )
		&& ((SEG1_expected_prev[4] !== last_SEG1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[4] = SEG1_expected_prev[4];
	end
	if (
		( SEG1_expected_prev[5] !== 1'bx ) && ( SEG1_prev[5] !== SEG1_expected_prev[5] )
		&& ((SEG1_expected_prev[5] !== last_SEG1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[5] = SEG1_expected_prev[5];
	end
	if (
		( SEG1_expected_prev[6] !== 1'bx ) && ( SEG1_prev[6] !== SEG1_expected_prev[6] )
		&& ((SEG1_expected_prev[6] !== last_SEG1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[6] = SEG1_expected_prev[6];
	end
	if (
		( SEG2_expected_prev[0] !== 1'bx ) && ( SEG2_prev[0] !== SEG2_expected_prev[0] )
		&& ((SEG2_expected_prev[0] !== last_SEG2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[0] = SEG2_expected_prev[0];
	end
	if (
		( SEG2_expected_prev[1] !== 1'bx ) && ( SEG2_prev[1] !== SEG2_expected_prev[1] )
		&& ((SEG2_expected_prev[1] !== last_SEG2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[1] = SEG2_expected_prev[1];
	end
	if (
		( SEG2_expected_prev[2] !== 1'bx ) && ( SEG2_prev[2] !== SEG2_expected_prev[2] )
		&& ((SEG2_expected_prev[2] !== last_SEG2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[2] = SEG2_expected_prev[2];
	end
	if (
		( SEG2_expected_prev[3] !== 1'bx ) && ( SEG2_prev[3] !== SEG2_expected_prev[3] )
		&& ((SEG2_expected_prev[3] !== last_SEG2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[3] = SEG2_expected_prev[3];
	end
	if (
		( SEG2_expected_prev[4] !== 1'bx ) && ( SEG2_prev[4] !== SEG2_expected_prev[4] )
		&& ((SEG2_expected_prev[4] !== last_SEG2_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[4] = SEG2_expected_prev[4];
	end
	if (
		( SEG2_expected_prev[5] !== 1'bx ) && ( SEG2_prev[5] !== SEG2_expected_prev[5] )
		&& ((SEG2_expected_prev[5] !== last_SEG2_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[5] = SEG2_expected_prev[5];
	end
	if (
		( SEG2_expected_prev[6] !== 1'bx ) && ( SEG2_prev[6] !== SEG2_expected_prev[6] )
		&& ((SEG2_expected_prev[6] !== last_SEG2_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[6] = SEG2_expected_prev[6];
	end
	if (
		( SEG3_expected_prev[0] !== 1'bx ) && ( SEG3_prev[0] !== SEG3_expected_prev[0] )
		&& ((SEG3_expected_prev[0] !== last_SEG3_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[0] = SEG3_expected_prev[0];
	end
	if (
		( SEG3_expected_prev[1] !== 1'bx ) && ( SEG3_prev[1] !== SEG3_expected_prev[1] )
		&& ((SEG3_expected_prev[1] !== last_SEG3_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[1] = SEG3_expected_prev[1];
	end
	if (
		( SEG3_expected_prev[2] !== 1'bx ) && ( SEG3_prev[2] !== SEG3_expected_prev[2] )
		&& ((SEG3_expected_prev[2] !== last_SEG3_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[2] = SEG3_expected_prev[2];
	end
	if (
		( SEG3_expected_prev[3] !== 1'bx ) && ( SEG3_prev[3] !== SEG3_expected_prev[3] )
		&& ((SEG3_expected_prev[3] !== last_SEG3_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[3] = SEG3_expected_prev[3];
	end
	if (
		( SEG3_expected_prev[4] !== 1'bx ) && ( SEG3_prev[4] !== SEG3_expected_prev[4] )
		&& ((SEG3_expected_prev[4] !== last_SEG3_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[4] = SEG3_expected_prev[4];
	end
	if (
		( SEG3_expected_prev[5] !== 1'bx ) && ( SEG3_prev[5] !== SEG3_expected_prev[5] )
		&& ((SEG3_expected_prev[5] !== last_SEG3_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[5] = SEG3_expected_prev[5];
	end
	if (
		( SEG3_expected_prev[6] !== 1'bx ) && ( SEG3_prev[6] !== SEG3_expected_prev[6] )
		&& ((SEG3_expected_prev[6] !== last_SEG3_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[6] = SEG3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] BUT;
reg clk;
reg reset;
reg [3:0] SW;
// wires                                               
wire check;
wire [3:0] dp;
wire ring;
wire [6:0] SEG0;
wire [6:0] SEG1;
wire [6:0] SEG2;
wire [6:0] SEG3;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.BUT(BUT),
	.check(check),
	.clk(clk),
	.dp(dp),
	.reset(reset),
	.ring(ring),
	.SEG0(SEG0),
	.SEG1(SEG1),
	.SEG2(SEG2),
	.SEG3(SEG3),
	.SW(SW)
);
// BUT[ 2 ]
initial
begin
	BUT[2] = 1'b0;
	BUT[2] = #20000 1'b1;
	BUT[2] = #420000 1'b0;
	BUT[2] = #20000 1'b1;
end 
// BUT[ 1 ]
initial
begin
	BUT[1] = 1'b1;
	# 40000;
	repeat(12)
	begin
		BUT[1] = 1'b0;
		BUT[1] = #5000 1'b1;
		# 5000;
	end
	BUT[1] = 1'b0;
	BUT[1] = #5000 1'b1;
	# 295000;
	repeat(32)
	begin
		BUT[1] = 1'b0;
		BUT[1] = #5000 1'b1;
		# 5000;
	end
	BUT[1] = 1'b0;
	BUT[1] = #5000 1'b1;
end 
// BUT[ 0 ]
initial
begin
	BUT[0] = 1'b1;
	BUT[0] = #200000 1'b0;
	BUT[0] = #20000 1'b1;
	BUT[0] = #580000 1'b0;
	BUT[0] = #20000 1'b1;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b1;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #10000 1'b0;
end 

main_vlg_sample_tst tb_sample (
	.BUT(BUT),
	.clk(clk),
	.reset(reset),
	.SW(SW),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.check(check),
	.dp(dp),
	.ring(ring),
	.SEG0(SEG0),
	.SEG1(SEG1),
	.SEG2(SEG2),
	.SEG3(SEG3),
	.sampler_rx(sampler)
);
endmodule

